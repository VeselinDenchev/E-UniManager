// <auto-generated />
using System;
using System.Collections.Generic;
using EUniManager.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EUniManager.Persistence.Migrations
{
    [DbContext(typeof(EUniManagerDbContext))]
    [Migration("20240525142344_Update_Diploma_Specialty_max_string_length_to_50")]
    partial class Update_Diploma_Specialty_max_string_length_to_50
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssignmentStudent", b =>
                {
                    b.Property<Guid>("AssignmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignmentsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("AssignmentStudent");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStopped")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Activities", t =>
                        {
                            t.HasCheckConstraint("CK_Activity_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments", t =>
                        {
                            t.HasCheckConstraint("CK_Assignment_DueDate", "DueDate > StartDate");

                            t.HasCheckConstraint("CK_Assignment_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_Assignment_StartDate", "StartDate >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.AssignmentSolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileId")
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MarkedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("FileId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssignmentsSolutions", t =>
                        {
                            t.HasCheckConstraint("CK_AssignmentSolution_Mark", "Mark IS NULL OR Mark BETWEEN 2 AND 6");

                            t.HasCheckConstraint("CK_AssignmentSolution_MarkedOn_UploadedOn", "MarkedOn IS NULL OR MarkedOn > UploadedOn");

                            t.HasCheckConstraint("CK_AssignmentSolution_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_AssignmentSolution_SeenOn_CreatedAt", "SeenOn IS NULL OR SeenOn > CreatedAt");

                            t.HasCheckConstraint("CK_AssignmentSolution_UploadedOn_SeenOn", "UploadedOn IS NULL OR UploadedOn > SeenOn");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.CertifiedSemester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<byte>("Semester")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("CertifiedSemesters", t =>
                        {
                            t.HasCheckConstraint("CK_CertifiedSemester_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_CertifiedSemester_Semester", "Semester BETWEEN 1 AND 16");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.CloudinaryFile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CloudinaryFiles", t =>
                        {
                            t.HasCheckConstraint("CK_CloudinaryFile_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<byte>("CreditsCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ExercisesCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LecturesCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CK_Course_ExercisesCount", "CreditsCount BETWEEN 2 AND 7");

                            t.HasCheckConstraint("CK_Course_LecturesCount", "LecturesCount >= 0");

                            t.HasCheckConstraint("CK_Course_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.CourseScheduleUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExactDate")
                        .HasColumnType("date");

                    b.Property<byte?>("GroupNumber")
                        .HasColumnType("tinyint");

                    b.Property<int?>("GroupType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("MonthlyFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<short>("RoomNumber")
                        .HasColumnType("smallint");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("CourseScheduleUnits", t =>
                        {
                            t.HasCheckConstraint("CK_CourseScheduleUnit_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte?>("GroupNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("RoomNumber")
                        .HasColumnType("smallint");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Exams", t =>
                        {
                            t.HasCheckConstraint("CK_Exam_GroupNumber", "GroupNumber IS NULL OR GroupNumber BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CK_Exam_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_Exam_RoomNumber", "RoomNumber BETWEEN 101 AND 520");

                            t.HasCheckConstraint("CK_Exam_Time", "Time BETWEEN '08:00:00' AND '18:00:00'");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Faculties", t =>
                        {
                            t.HasCheckConstraint("CK_Faculty_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.IndividualProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("IndividualProtocols", t =>
                        {
                            t.HasCheckConstraint("CK_IndividualProtocol_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.PayedTax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("PlanNumber")
                        .HasColumnType("int");

                    b.Property<byte>("Semester")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaxNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_TaxNumber");

                    b.ToTable("PayedTaxes", t =>
                        {
                            t.HasCheckConstraint("CK_PayedTax_Amount", "Amount > 0");

                            t.HasCheckConstraint("CK_PayedTax_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_PayedTax_Semester", "Semester BETWEEN 1 AND 16");

                            t.HasCheckConstraint("CK_PayedTax_TaxNumber", "TaxNumber > 0");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.RequestApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("IX_Number");

                    b.HasIndex("StudentId");

                    b.ToTable("RequestApplications", t =>
                        {
                            t.HasCheckConstraint("CK_RequestApplication_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_RequestApplication_ResolutionDate", "ResolutionDate IS NULL OR ResolutionDate > RegistryDate");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FileId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("FileId");

                    b.ToTable("Resources", t =>
                        {
                            t.HasCheckConstraint("CK_Resource_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrentYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("EducationType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FirstAcademicYearStart")
                        .HasColumnType("int");

                    b.Property<bool>("HasGraduated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name", "FirstAcademicYearStart")
                        .IsUnique()
                        .HasDatabaseName("IX_Name_FirstAcademicYearStart");

                    b.ToTable("Specialties", t =>
                        {
                            t.HasCheckConstraint("CK_Specialty_FirstAcademicYearStart", "FirstAcademicYearStart BETWEEN 2020 AND 2099");

                            t.HasCheckConstraint("CK_Specialty_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Students.Diploma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EducationalAndQualificationDegree")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuedByInstitutionType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("ProfessionalQualification")
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.ComplexProperty<Dictionary<string, object>>("CityArea", "EUniManager.Domain.Entities.Students.Diploma.CityArea#CityArea", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Area")
                                .HasMaxLength(50)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("DiplomaArea");

                            b1.Property<string>("City")
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("DiplomaCity");
                        });

                    b.HasKey("Id");

                    b.ToTable("Diplomas", t =>
                        {
                            t.HasCheckConstraint("CK_Diploma_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_Diploma_Year", "Year BETWEEN 2020 AND 2099");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Students.IdCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateIssued")
                        .HasColumnType("date");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.ToTable("IdCards", t =>
                        {
                            t.HasCheckConstraint("CK_IdCard_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiplomaOwnedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsualResidenceCountry")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.ComplexProperty<Dictionary<string, object>>("Enrollment", "EUniManager.Domain.Entities.Students.Student.Enrollment#Enrollment", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date")
                                .HasColumnName("EnrollmentDate");

                            b1.Property<decimal>("Mark")
                                .HasPrecision(3, 2)
                                .HasColumnType("DECIMAL(3,2)")
                                .HasColumnName("EnrollmentMark");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("EnrollmentReason");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PermanentResidence", "EUniManager.Domain.Entities.Students.Student.PermanentResidence#Residence", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(15)
                                .IsUnicode(false)
                                .HasColumnType("varchar(15)")
                                .HasColumnName("PermanentResidencePhoneNumber");

                            b1.Property<string>("Street")
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("PermanentResidenceStreet");

                            b1.ComplexProperty<Dictionary<string, object>>("CityArea", "EUniManager.Domain.Entities.Students.Student.PermanentResidence#Residence.CityArea#CityArea", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Area")
                                        .HasMaxLength(50)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("PermanentResidenceArea");

                                    b2.Property<string>("City")
                                        .HasMaxLength(30)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("PermanentResidenceCity");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TemporaryResidence", "EUniManager.Domain.Entities.Students.Student.TemporaryResidence#Residence", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(15)
                                .IsUnicode(false)
                                .HasColumnType("varchar(15)")
                                .HasColumnName("TemporaryResidencePhoneNumber");

                            b1.Property<string>("Street")
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("TemporaryResidenceStreet");

                            b1.ComplexProperty<Dictionary<string, object>>("CityArea", "EUniManager.Domain.Entities.Students.Student.TemporaryResidence#Residence.CityArea#CityArea", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Area")
                                        .HasMaxLength(50)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("TemporaryResidenceArea");

                                    b2.Property<string>("City")
                                        .HasMaxLength(30)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("TemporaryResidenceCity");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("DiplomaOwnedId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId");

                    b.ToTable("Students", t =>
                        {
                            t.HasCheckConstraint("CK_Student_EnrolledInSemester", "EnrollmentMark BETWEEN 0 AND 30");

                            t.HasCheckConstraint("CK_Student_GroupNumber", "GroupNumber BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CK_Student_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<byte>("Semester")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("Protocol")
                        .IsUnique()
                        .HasDatabaseName("IX_Protocol");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Subjects", t =>
                        {
                            t.HasCheckConstraint("CK_Subject_ModifiedAt", "ModifiedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_Subject_Semester", "Semester BETWEEN 1 AND 16");
                        });
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Rank")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers", t =>
                        {
                            t.HasCheckConstraint("CK_Teacher_ModifiedAt", "ModifiedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<Guid>("AssistantsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssistingSubjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssistantsId", "AssistingSubjectsId");

                    b.HasIndex("AssistingSubjectsId");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("AssignmentStudent", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Activity", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Subject", "Subject")
                        .WithMany("Activities")
                        .HasForeignKey("SubjectId");

                    b.HasOne("EUniManager.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Activities")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Resource", "Resource")
                        .WithOne("Assignment")
                        .HasForeignKey("EUniManager.Domain.Entities.Assignment", "Id");

                    b.HasOne("EUniManager.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Resource");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.AssignmentSolution", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Assignment", "Assignment")
                        .WithMany("Solutions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.CloudinaryFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("EUniManager.Domain.Entities.Students.Student", "Student")
                        .WithMany("AssignmentSolutions")
                        .HasForeignKey("StudentId");

                    b.Navigation("Assignment");

                    b.Navigation("File");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.CertifiedSemester", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Students.Student", "Student")
                        .WithMany("CertifiedSemesters")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.CourseScheduleUnit", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Exam", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Subject", "Subject")
                        .WithOne("Exam")
                        .HasForeignKey("EUniManager.Domain.Entities.Exam", "Id");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.IndividualProtocol", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Students.Student", "Student")
                        .WithMany("IndividualProtocols")
                        .HasForeignKey("StudentId");

                    b.HasOne("EUniManager.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.PayedTax", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Students.Student", "Student")
                        .WithMany("PayedTaxes")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.RequestApplication", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.CloudinaryFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Students.Student", "Student")
                        .WithMany("RequestApplications")
                        .HasForeignKey("StudentId");

                    b.Navigation("File");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Resource", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.CloudinaryFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Activity");

                    b.Navigation("File");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Specialty", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Students.Student", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Activity", null)
                        .WithMany("Students")
                        .HasForeignKey("ActivityId");

                    b.HasOne("EUniManager.Domain.Entities.Students.Diploma", "DiplomaOwned")
                        .WithMany()
                        .HasForeignKey("DiplomaOwnedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Students")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EUniManager.Domain.Entities.Students.PersonalData", "PersonalData", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("BirthDate")
                                .HasColumnType("date")
                                .HasColumnName("BirthDate");

                            b1.Property<string>("Citizenship")
                                .IsRequired()
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Citizenship");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(30)
                                .IsUnicode(false)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("PersonalDataEmail");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasMaxLength(6)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("Gender");

                            b1.Property<Guid?>("IdCardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InsuranceNumber")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("InsuranceNumber");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("StudentId");

                            b1.HasIndex("IdCardId");

                            b1.ToTable("Students");

                            b1.HasOne("EUniManager.Domain.Entities.Students.IdCard", "IdCard")
                                .WithMany()
                                .HasForeignKey("IdCardId");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");

                            b1.OwnsOne("EUniManager.Domain.Abstraction.Student.CityArea", "CityArea", b2 =>
                                {
                                    b2.Property<Guid>("PersonalDataStudentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Area")
                                        .HasMaxLength(50)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("PersonalDataArea");

                                    b2.Property<string>("City")
                                        .HasMaxLength(30)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(30)")
                                        .HasColumnName("PersonalDataCity");

                                    b2.HasKey("PersonalDataStudentId");

                                    b2.ToTable("Students");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonalDataStudentId");
                                });

                            b1.OwnsOne("EUniManager.Domain.Entities.Students.UniqueIdentifier", "UniqueIdentifier", b2 =>
                                {
                                    b2.Property<Guid>("PersonalDataStudentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Identifier")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .IsUnicode(false)
                                        .HasColumnType("varchar(50)")
                                        .HasColumnName("UniqueIdentifier");

                                    b2.Property<string>("UniqueIdentifierType")
                                        .IsRequired()
                                        .IsUnicode(false)
                                        .HasColumnType("varchar(900)")
                                        .HasColumnName("UniqueIdentifierType");

                                    b2.HasKey("PersonalDataStudentId");

                                    b2.HasIndex("UniqueIdentifierType", "Identifier")
                                        .IsUnique()
                                        .HasDatabaseName("IX_UniqueIdentifierType_UniqueIdentifier");

                                    b2.ToTable("Students");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonalDataStudentId");
                                });

                            b1.Navigation("CityArea")
                                .IsRequired();

                            b1.Navigation("IdCard");

                            b1.Navigation("UniqueIdentifier")
                                .IsRequired();
                        });

                    b.OwnsOne("EUniManager.Domain.Entities.Students.ServiceData", "ServiceData", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte?>("EnrolledInSemester")
                                .HasColumnType("tinyint")
                                .HasColumnName("EnrolledInSemester");

                            b1.Property<int>("FacultyNumber")
                                .HasColumnType("int")
                                .HasColumnName("FacultyNumber");

                            b1.Property<byte>("GroupNumber")
                                .HasColumnType("tinyint")
                                .HasColumnName("GroupNumber");

                            b1.Property<long>("Pin")
                                .HasColumnType("bigint")
                                .HasColumnName("Pin");

                            b1.Property<int>("PlanNumber")
                                .HasColumnType("int")
                                .HasColumnName("PlanNumber");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(15)
                                .IsUnicode(false)
                                .HasColumnType("varchar(15)")
                                .HasColumnName("Status");

                            b1.HasKey("StudentId");

                            b1.HasIndex("FacultyNumber")
                                .IsUnique()
                                .HasDatabaseName("IX_FacultyNumber");

                            b1.HasIndex("Pin")
                                .IsUnique()
                                .HasDatabaseName("IX_Pin");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("DiplomaOwned");

                    b.Navigation("PersonalData")
                        .IsRequired();

                    b.Navigation("ServiceData")
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Subject", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Teacher", "Lecturer")
                        .WithMany("LecturingSubjects")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EUniManager.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Subjects")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("EUniManager.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("AssistantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EUniManager.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("AssistingSubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Assignment", b =>
                {
                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Course", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Assignment")
                        .IsRequired();
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Students.Student", b =>
                {
                    b.Navigation("AssignmentSolutions");

                    b.Navigation("CertifiedSemesters");

                    b.Navigation("IndividualProtocols");

                    b.Navigation("PayedTaxes");

                    b.Navigation("RequestApplications");
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Exam")
                        .IsRequired();
                });

            modelBuilder.Entity("EUniManager.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Assignments");

                    b.Navigation("LecturingSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
